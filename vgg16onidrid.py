# -*- coding: utf-8 -*-
"""VGG16onIDRiD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FY9aDs13eKnEGlR-IO8Gs951IPRTrfy
"""

# VGG16 on IDRiD

# Importing library modules

from google.colab import files
import numpy as np
import matplotlib.pyplot as plt
import glob
import cv2
from google.colab.patches import cv2
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input
from keras.models import Model, Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
import os
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as pd
import numpy as np
import cv2

IMG_SIZE = 128

def load_idrid_data(image_dir, label_csv):
    df = pd.read_csv(label_csv)
    df.columns = df.columns.str.strip()
    X, y = [], []

    for _, row in df.iterrows():
        img_file = row['Image name'].strip() + ".jpg"
        label = int(row['Retinopathy grade'])
        path = os.path.join(image_dir, img_file)

        img = cv2.imread(path)
        if img is not None:
            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
            X.append(img / 255.0)
            y.append(label)

    return np.array(X), np.array(y)

# Paths
base_path = "/content/drive/MyDrive/Grading_IDRiD"

train_dir = os.path.join(base_path, "1. Original Images", "a. Training Set")
test_dir  = os.path.join(base_path, "1. Original Images", "b. Testing Set")

train_csv = os.path.join(base_path, "2. Groundtruths", "a. IDRiD_Disease Grading_Training Labels.csv")
test_csv  = os.path.join(base_path, "2. Groundtruths", "b. IDRiD_Disease Grading_Testing Labels.csv")

# Load data
x_train, y_train = load_idrid_data(train_dir, train_csv)
x_test, y_test   = load_idrid_data(test_dir, test_csv)

print("Train:", x_train.shape, "Test:", x_test.shape)

from sklearn import preprocessing
from tensorflow.keras.utils import to_categorical

# Encode integer class labels
le = preprocessing.LabelEncoder()
y_train = le.fit_transform(y_train)
y_test = le.transform(y_test)

# One-hot encode for softmax output
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

from tensorflow.keras.applications import VGG16

model = VGG16(input_shape=(128, 128, 3), weights='imagenet', include_top=False)
print(len(model.layers))

from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Model

activation = 'sigmoid'
x = model.output
x = Flatten()(x)
x = Dense(128, activation=activation, kernel_initializer='he_uniform')(x)
prediction_layer = Dense(5, activation='softmax')(x)

cnn_model = Model(inputs=model.input, outputs=prediction_layer)

for layers in cnn_model.layers[:19]:
    print(layers)
    layers.trainable = False

cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
print(cnn_model.summary())

from keras.callbacks import ModelCheckpoint, EarlyStopping

checkpoint = ModelCheckpoint("cnn_model.keras", monitor='accuracy', verbose=1, save_best_only=True)
early = EarlyStopping(monitor='accuracy', patience=5, verbose=1)

history = cnn_model.fit(
    x_train, y_train,
    epochs=20,
    callbacks=[checkpoint, early]
)

model.save('VGG_model.keras')